// lab10_1
/* Написать программу, в которой создаются и разрушаются объекты, определенного пользователем класса. 
Выполнить исследование вызовов конструкторов и деструкторов.
*/

#include <iostream> // содержит функции ввода вывода cin, cout
#include<windows.h> //содержит функции SetConsoleCP(), SetConsoleOutputCP()
#include <iomanip> //необходима для setw() задание ширины поля вывода данных 

using namespace std;

class car
{
public: // После объявления public следуют данные и функции(методы), доступные внешним для класса функциям.
car() // конструктор
{
	cout<<"Вызван конструктор"<<endl;
}
~car() // деструктор
{
	cout<<"Вызван деструктор"<<endl;
}


void set_mark(char mark1[20]) //метод записывает марку автомобиля в недоступный из вне класса массив mark[20]
{
	strcpy(mark, mark1);
}
void set_power(int power1) //метод записывает мощность автомобиля в недоступную из вне класса переменную power
{
	power=power1;
}
void set_cost(int cost1) //метод записывает стоимость автомобиля в недоступную из вне класса переменную cost
{
	cost=cost1;
}
char* get_mark() // метод позволяющий получить доступ к массиву марки автомобиля mark[20] 
{
	return mark;
}

int get_power() // метод позволяющий получить доступ к мощности автомобиля переменной power
{
	return power;
}
int get_cost() // метод позволяющий получить доступ к стоимости автомобиля переменной cost
{
	return cost;
}


private: // После объявления private следуют данные и функции(методы), не доступны внешним для класса функциям,
		 // но они доступны для методов находящихся внутри класса
char mark[20]; // марка автомобиля
int power; // мощность
int cost; // стоимость
};

void main()
{
	SetConsoleCP(1251);// установка кодовой страницы win-cp 1251 в поток ввода
    SetConsoleOutputCP(1251); // установка кодовой страницы win-cp 1251 в поток вывода
	/* Для правильного отображения русских символов в консоли нужно выбрать 
	в свойствах консоли шрифт Lucida Console */

car *car_ptr=new car(); // при создании объекта вызывается конструктор, выводится сообщение "Вызван конструктор" 
system("pause"); // команда задержки  экрана
car_ptr->set_mark("Toyota corolla"); // заполняем данные класса car с помощью методов
car_ptr->set_power(150);
car_ptr->set_cost(600000);

cout<<car_ptr->get_mark()<<" "<<car_ptr->get_power()<<" л.с. "<<car_ptr->get_cost()<<"р"<<endl; // выводим данные объекта c помощью методов класса

delete car_ptr; // при удалении объекта вызывается деструктор, выводится сообщение "Вызван деструктор" 
system("pause"); // команда задержки  экрана
}

